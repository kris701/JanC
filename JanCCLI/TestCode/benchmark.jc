bool sensorStartState = false
int value = 0

// Must pass
int scoped_return() {
	{ return 1 }
}
// Must pass
int conditional_return1() {
	if (value == 1) {
		return 1
	} else {
		return 5
	}
}

void print(int num) {}

on (value == 1) {
	digitalWrite(4,1)
}

once {
	digitalWrite(4,0)
}

idle {
	digitalWrite(6,1)
}

every 100 {
	int a = 1
	a = -1
	a = a + 1
}

every 50 {
	int b
	str c = "a"
	c = "text"
	sleep(200)
	if ((1 * 2) == (2 == 3)) {
		int a = 5
		while (a < 10) {
			a += 1
		}
		a = func(1,2)
		for(int i = 0, i < 10, i += 1)
		{
			if (i == 2) {
				digitalWrite(4, 1)
			} else
			{
				analogWrite(2, 100)
			}
		}
	}
}

module TemperatureSensor {
	bool running = sensorStartState
	int lastMeasurement
	void start() {
		running = true
	}
	void stop() {
		TemperatureSensor.running = false
	}
	every 100 {
		if (running) {
			lastMeasurement = analogRead(5)
		}
	}
}

int func(int a,int b) { 
	return a + b
}
module OtherModule {
	int local

	once {
		TemperatureSensor.start()
	}

	idle {
		print(TemperatureSensor.lastMeasurement)
	}
}
struct Point {
	int x
	int y
}
void struct_func(Point a, Point b) {}
struct_func(Point{1, 2}, Point{3, 4})
struct_func(Point{5, 6}, Point{7, 8})
Point my_point = Point{9, y=10}
my_point.x
my_point.x = 5

const int id = 5
digitalRead(id)

void loop(){}

every 100 {
	critical {
		int a = 5
		a += 1
		digitalWrite(1,5)
	}
}

// Pushes detected conveyor items and takes conveyor velocity into account
module Controller {
    int waitInterval = 0
    on (ItemSensor.GetDetectedTime()+WaitInterval >= 10) {
        ItemPusher.Push()
    }

    every 50 {
        const int baseWaitInterval = 70
        waitInterval = baseWaitInterval / (SpeedSensor.GetVelocity())
    }
}

// Measures speed of conveyor belt
module SpeedSensor {
    const int pin = 5
    const int maxVelocity = 2
    // Running average
    const int smoothFactor=1
    float velocity = 0
    every 50 {
        int measurement = analogRead(pin)
        int normalized = measurement / 256
        int currentVelocity = normalized * maxVelocity
        velocity = (velocity*smoothFactor) + (currentVelocity*(1-smoothFactor))
    }

    int GetVelocity() {
        return velocity
    }
}

// Senses whether items are in view and records the time
module ItemSensor {
    const int pin = 6
    // Whether an item was sensed last measurement
    bool lastItemSensed = false
    // Time point in milliseconds at which item was sensed
    int detectedTime = 0

    // Update whether item is being sensed
    every 50 {
        bool itemSensed = digitalRead(pin)
        if (itemSensed) {
			if (!lastItemSensed) {
				itemDetectedTime = now()
			}
		}
        lastItemSensed = itemSensed
    }
    int GetDetectedTime() {
        return detectedTime
    }	
    bool IsItemSensed() {
        return lastItemSensed
    }
}

// Pushes items on the conveyor belt
module ItemPusher {
    const int pin = 7
    // How long to apply actuator force in ms
    const int pushTime = 50

    void Push() {
        digitalWrite(pin, true)
        sleep(pushTime)
        digitalWrite(pin, false)
    }
}